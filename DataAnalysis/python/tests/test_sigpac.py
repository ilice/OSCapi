import unittest
import osc.importer.sigpac as sigpac


class TestPolygons(unittest.TestCase):
    def test_simple_polygon(self):
        # easy case
        points = [[1, 1], [1, 4], [4, 4], [4, 1], [1, 1]]

        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 1, 'The polygon should only have one line')
        self.assertListEqual(points, polygon[0])

    def test_two_layer_polygon(self):
        # more complicated one
        points = [[1, 1], [1, 4], [4, 4], [4, 1], [1, 1], [2, 2], [2, 3], [3, 3], [3, 2], [2, 2]]

        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 2, 'The polygon should have two layers')
        self.assertListEqual(points[:5], polygon[0])
        self.assertListEqual(points[5:], polygon[1])

    def test_two_layer_polygon_with_intersecting_vertex(self):
        # more complicated one
        points = [[1, 1], [1, 4], [4, 4], [4, 1], [1, 1], [1, 1], [2, 3], [2, 2], [3, 2], [1, 1]]

        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 2, 'The polygon should have two layers')
        self.assertListEqual(points[:5], polygon[0])
        self.assertListEqual(points[5:], polygon[1])

    def test_two_layer_polygon_with_intersecting_vertex_starting_from_other_vertex(self):
        # more complicated one
        points = [[1, 4], [4, 4], [2, 3], [2, 2], [3, 2], [4, 4], [4, 1], [1, 1], [1, 4]]

        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 2, 'The polygon should have two layers')
        self.assertListEqual([[1, 4], [4, 4], [4, 1], [1, 1], [1, 4]], polygon[0])
        self.assertListEqual([[4, 4], [2, 3], [2, 2], [3, 2], [4, 4]], polygon[1])

    def test_real_ok(self):
        points = [[40.94545142110616, -4.6371661787746135], [40.94547447217728, -4.637259136662907],
                  [40.945478160214655, -4.637269614887652], [40.945483189356516, -4.637284199409739],
                  [40.945493582916384, -4.637314040683031], [40.945505736676054, -4.637342288555322],
                  [40.94553373307126, -4.63739744319434], [40.94556005308673, -4.637407837599492],
                  [40.94556575278122, -4.6374080890566445], [40.94563406781014, -4.637434409088548],
                  [40.9474431114372, -4.637962329357039], [40.947476228364856, -4.636838030333007],
                  [40.94714144339635, -4.636881447792459], [40.94552694541126, -4.637156874853604],
                  [40.94550573835668, -4.637160479075076], [40.94545142110616, -4.6371661787746135]]

        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 1, 'The polygon should have one layers')
        self.assertListEqual(points, polygon[0])

    def test_real_several_layers(self):
        points = [[40.9680692366683, -4.622072858361762], [40.968303546915344, -4.622200763776481],
                  [40.96830752077581, -4.6222029338526855], [40.968313125754726, -4.622205994925804],
                  [40.968323957688725, -4.6222119092007], [40.9683295308164, -4.622214950995426],
                  [40.96840794100976, -4.622257749022099], [40.96846668474627, -4.6221348836430405],
                  [40.96850705702483, -4.622077651127978], [40.968581479949975, -4.621972145520736],
                  [40.96862523935591, -4.621910449638961], [40.96884101470918, -4.621606224887307],
                  [40.96888935314921, -4.6215380707444185], [40.96909606347272, -4.621275870371172],
                  [40.969310923522485, -4.620954886830473], [40.96942617973158, -4.620760656199124],
                  [40.969444244411086, -4.620730213104564], [40.969516734470886, -4.620552177160915],
                  [40.969529962792215, -4.620510466265947], [40.96955821064783, -4.6204213917164205],
                  [40.96957253616043, -4.62037611096631], [40.96959295280423, -4.620251870116977],
                  [40.96959863992665, -4.620217261213835], [40.969599069080964, -4.620180381651606],
                  [40.9695990766247, -4.620179742111935], [40.96960258194364, -4.619879017650579],
                  [40.96960366153528, -4.6197710720713525], [40.96960368668106, -4.619768278381024],
                  [40.969580386665555, -4.619753210223389], [40.96938709410342, -4.619579019905533],
                  [40.969274754796366, -4.6197916144614535], [40.969136944559345, -4.620052389070134],
                  [40.9687100139536, -4.620860256765069], [40.96868686900197, -4.620904053917463],
                  [40.96866407106118, -4.620947193089979], [40.968653135191005, -4.620967886347622],
                  [40.96865288708664, -4.620968355734541], [40.96865167338693, -4.620970651539494],
                  [40.96863476960106, -4.621002637743518], [40.96861263634525, -4.621044521306026],
                  [40.96834343724786, -4.62155395615051], [40.968250253944284, -4.621730298110914],
                  [40.9680692366683, -4.622072858361762], [40.96856605306862, -4.6214297898956795],
                  [40.968566879525646, -4.621371075459958], [40.96857511642329, -4.621332283145848],
                  [40.968602843763975, -4.621186279507233], [40.96863016709653, -4.62105587795441],
                  [40.968667830344245, -4.620979185999083], [40.968697189639435, -4.620927462913224],
                  [40.96873461735528, -4.620867547349151], [40.96876176717967, -4.620859820904675],
                  [40.9687914483379, -4.6208983056018855], [40.96880943841598, -4.620976359616251],
                  [40.968810055322514, -4.621045597538908], [40.9687911482601, -4.621145823380269],
                  [40.96876137657459, -4.621226903264898], [40.96869410928097, -4.621316814329866],
                  [40.96861590695618, -4.621391155160563], [40.96856605306862, -4.6214297898956795]]

        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 2, 'The polygon should have two layers')

    def test_real_intersecting_inner_polygon(self):
        points = [[40.94393410224013, -4.593024857503039], [40.943940360169286, -4.593030311611104],
                  [40.94403514105789, -4.593112912807874], [40.944051368424155, -4.593077406202786],
                  [40.94405316634259, -4.593073471734661], [40.9440539969893, -4.593071651184007],
                  [40.9439668453083, -4.593041204739508], [40.94401298685487, -4.592811490978478],
                  [40.94410003124751, -4.592841975979756], [40.9440539969893, -4.593071651184007],
                  [40.944064358699116, -4.593048989016407], [40.944086257261716, -4.5930010838914015],
                  [40.94408827730059, -4.592996661596167], [40.94410035478617, -4.592970240980534],
                  [40.94410258688722, -4.592965359356682], [40.944105097267496, -4.5929598675298475],
                  [40.944418927490815, -4.592273346428097], [40.944425239064586, -4.5922595984208225],
                  [40.9445202186106, -4.592052852765986], [40.94452956191909, -4.592032524121894],
                  [40.94453101282667, -4.592029367494933], [40.9445319725547, -4.5920272770468085],
                  [40.944532227364576, -4.5920267230026175], [40.944589381053895, -4.591902368999503],
                  [40.94465576908719, -4.591745959223433], [40.94474342368663, -4.591583315821225],
                  [40.94474496008963, -4.5915804651339425], [40.9447588740503, -4.59155464633937],
                  [40.94476160738919, -4.591549573607988], [40.9447619569146, -4.591548925686415],
                  [40.94476952158298, -4.591534889341451], [40.94486297143024, -4.591389099443576],
                  [40.94491734651777, -4.591297145709811], [40.944937634916364, -4.591262835203109],
                  [40.944942585268876, -4.591254464190495], [40.94494386099465, -4.5912523075252825],
                  [40.94494477965134, -4.591250754357528], [40.9450039961266, -4.5911506131749675],
                  [40.9450511057794, -4.591087523383184], [40.945059620117426, -4.591076120634014],
                  [40.9451907508133, -4.590900507065034], [40.94518469572615, -4.590897039469406],
                  [40.94518362703346, -4.590896427590072], [40.94517083373403, -4.590889101801871],
                  [40.944938229204375, -4.590757437941952], [40.9448716685081, -4.5907197612623865],
                  [40.9443458783785, -4.591522925851391], [40.944315462963615, -4.591569432035901],
                  [40.94429115879491, -4.591606594068137], [40.94427570843133, -4.5916302193171585],
                  [40.94427262472887, -4.591634934141032], [40.94426120187016, -4.591652399525048],
                  [40.94422256883665, -4.591711470191321], [40.944218486011216, -4.591717614130703],
                  [40.944149807204816, -4.5918209546881705], [40.94404134369131, -4.5919841580023615],
                  [40.944040708342996, -4.591985094261609], [40.94404001096858, -4.591986102605276],
                  [40.94403959187337, -4.591986689338915], [40.9440337949486, -4.591994865891264],
                  [40.94403315121839, -4.591995773652023], [40.94401760530117, -4.592017574159463],
                  [40.94400655040807, -4.592033069794862], [40.94393593452484, -4.592999777993056],
                  [40.94393410224013, -4.593024857503039], [40.94408744331203, -4.5925013192723645],
                  [40.94413541546386, -4.59238514182162], [40.94413585383745, -4.592384077319168],
                  [40.94413056569451, -4.592380196495407], [40.94409300638474, -4.592352600737161],
                  [40.94409425361206, -4.592349648628784], [40.944129381333994, -4.592266723049525],
                  [40.94413375333517, -4.59225640324307], [40.944171044424024, -4.592283844774196],
                  [40.94417580199249, -4.592287344221107], [40.944176482603105, -4.592285698014165],
                  [40.944277306013205, -4.592041538031992], [40.944285577276176, -4.592021505269307],
                  [40.94433695331577, -4.5920583730950035], [40.9443584813983, -4.592006197387407],
                  [40.94440594644169, -4.592040268170147], [40.94438440410991, -4.592092419570209],
                  [40.94424430896445, -4.592431921253547], [40.94422706319673, -4.592473721834107],
                  [40.94418635815573, -4.592572360978307], [40.944176373632224, -4.592565189417166],
                  [40.94408744331203, -4.5925013192723645], [40.944275605333125, -4.591666649608244],
                  [40.9444253254165, -4.591422225595062], [40.94443853110621, -4.591400665648469],
                  [40.94453371348757, -4.591501428765546], [40.944370547153845, -4.591767793264015],
                  [40.944354159694356, -4.591750346320765], [40.944275605333125, -4.591666649608244]]
        polygon = sigpac.make_polygon(points)
        self.assertEqual(len(polygon), 4, 'The polygon should have four layers')
